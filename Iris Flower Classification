Iris Flowers Classification 
SG
Importing Libraries
[ ]
# Importing Libraries
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
Connecting Google Drive with Google Colab
[ ]
# Connecting Google Drive with Google Colab
from google.colab import drive
drive.mount('/content/drive')
Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount("/content/drive", force_remount=True).
Importing Data Set from Google drive
[ ]
# Importing Data Set from google drive
import os
os.chdir('/content/drive/My Drive')
Reading Data set
[ ]
# Reading Data set
data=pd.read_csv('iris_data.csv')
data.head()

Giving Proper Heading to Columns
[ ]
# Giving Proper Heading to Columns
data_header = ['SepalLength','SepalWidth','PetalLength','PetalWidth','Species']
data.to_csv('Iris.csv', header = data_header, index = False)
new_data = pd.read_csv('Iris.csv')
new_data.head()

Checking no. of rows and columns
[ ]
# Checking no. of rows and columns
new_data.shape
(149, 5)
Checking datatypes in dataset
[ ]
# Checking datatypes in dataset
new_data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 149 entries, 0 to 148
Data columns (total 5 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   SepalLength  149 non-null    float64
 1   SepalWidth   149 non-null    float64
 2   PetalLength  149 non-null    float64
 3   PetalWidth   149 non-null    float64
 4   Species      149 non-null    object 
dtypes: float64(4), object(1)
memory usage: 5.9+ KB
Describing the Dataset
[ ]
# Describing Dataset
new_data.describe()

Checking null values in Dataset
[ ]
# Checking Null Values in DataSet
new_data.isnull().sum()
SepalLength    0
SepalWidth     0
PetalLength    0
PetalWidth     0
Species        0
dtype: int64
Data Visualization
Graphs of features vs Species
[ ]
# Sepal Length vs Type
plt.bar(new_data['Species'],new_data['SepalLength'], width = 0.5)
plt.title("Sepal Length vs Type")
plt.show()

[ ]
# Sepal Width vs Type
plt.bar(new_data['Species'],new_data['SepalWidth'], width = 0.5)
plt.title("Sepal Width vs Type")
plt.show()

[ ]
# Petal Length vs Type
plt.bar(new_data['Species'],new_data['PetalLength'], width = 0.5)
plt.title("Petal Length vs Type")
plt.show()

[ ]
# Petal Width vs Type
plt.bar(new_data['Species'],new_data['PetalWidth'], width = 0.5)
plt.title("Petal Width vs Type")
plt.show()

Pair plot for Dataset
[ ]
sns.pairplot(new_data,hue='Species')

Splitting the Dataset
[ ]
x = new_data.drop(columns="Species")
y = new_data["Species"]
[ ]
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.4, random_state = 1)
[ ]
x_train.head()

[ ]
x_test.head()

[ ]
y_train.head()
12         Iris-setosa
2          Iris-setosa
97     Iris-versicolor
112     Iris-virginica
103     Iris-virginica
Name: Species, dtype: object
[ ]
y_test.head()
145     Iris-virginica
89     Iris-versicolor
54     Iris-versicolor
77     Iris-versicolor
84     Iris-versicolor
Name: Species, dtype: object
[ ]
print("x_train: ", len(x_train))
print("x_test: ", len(x_test))
print("y_train: ", len(y_train))
print("y_test: ", len(y_test))
x_train:  89
x_test:  60
y_train:  89
y_test:  60
Building Model using Logistic Regression
[ ]
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, roc_auc_score
[ ]
model = LogisticRegression()
model.fit(x_train, y_train)

[ ]
predict = model.predict(x_test)
print("Pridicted values on Test Data", predict)
Pridicted values on Test Data ['Iris-virginica' 'Iris-versicolor' 'Iris-versicolor' 'Iris-versicolor'
 'Iris-versicolor' 'Iris-versicolor' 'Iris-versicolor' 'Iris-versicolor'
 'Iris-setosa' 'Iris-versicolor' 'Iris-setosa' 'Iris-setosa'
 'Iris-versicolor' 'Iris-setosa' 'Iris-versicolor' 'Iris-setosa'
 'Iris-versicolor' 'Iris-setosa' 'Iris-versicolor' 'Iris-setosa'
 'Iris-virginica' 'Iris-virginica' 'Iris-setosa' 'Iris-virginica'
 'Iris-virginica' 'Iris-setosa' 'Iris-versicolor' 'Iris-setosa'
 'Iris-versicolor' 'Iris-virginica' 'Iris-virginica' 'Iris-versicolor'
 'Iris-setosa' 'Iris-virginica' 'Iris-setosa' 'Iris-setosa'
 'Iris-virginica' 'Iris-virginica' 'Iris-setosa' 'Iris-virginica'
 'Iris-virginica' 'Iris-virginica' 'Iris-versicolor' 'Iris-setosa'
 'Iris-setosa' 'Iris-setosa' 'Iris-versicolor' 'Iris-setosa' 'Iris-setosa'
 'Iris-virginica' 'Iris-virginica' 'Iris-versicolor' 'Iris-virginica'
 'Iris-versicolor' 'Iris-virginica' 'Iris-virginica' 'Iris-versicolor'
 'Iris-setosa' 'Iris-virginica' 'Iris-versicolor']
[ ]
y_test_pred = model.predict(x_test)
y_train_pred = model.predict(x_train)
[ ]
print("Training Accuracy : ", accuracy_score(y_train, y_train_pred))
print("Test Accuracy : ", accuracy_score(y_test, y_test_pred))
Training Accuracy :  0.9775280898876404
Test Accuracy :  0.95
Colab paid products - Cancel contracts here
